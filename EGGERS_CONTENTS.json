{"home":{"content":"# Auth w/Passport 2\n\nWelcome to **Lecture 36**! Here is a brief class breakdown.\n\n## Learning Objectives\n\n1. **Finally** get to passport.js\n2. Light intro to SQL if possible\n\n## To Do Today\n\n### [Warmup](#warmup)\n### [PassportJS](#passportjs)\n### [Local Strategy](#local-strategy)\n### [Github Strategy](#github-strategy)","idx":0},"title":{"content":"Auth w/Passport 2","idx":1},"desc":{"content":"Vanilla Use Auth + with passport.js","idx":2},"warmup":{"content":"# Warmup\n\nLet's begin with a few exercises.\n\n## Exercise 1\n\nPlease find **[Exercise 1](https://github.com/mottaquikarim/nycda_lecture36_fe-js-practice)** here.\n\nThe **README** will detail your task.\n\n\n## Exercise 2\n\nPlease find **[Exercise 2](https://github.com/mottaquikarim/nycda_lecture36_express-pratice)** here.\n\nThe **README** will detail your task.","idx":3},"passportjs":{"content":"# PassportJS\n\nJust like we used **express** to simplify our work for creating servers, we will use **passport** to simplify our work for developing user authentication.\n\n## Definition\n\n**passport.js** is a NodeJS library that tries to make user authentication a matter of configuration rather than code.\n\nRemember all that user session stuff we had to build? With passport, we don't have to deal with any of that.\n\n## Documentation\n\nFind the passport docs here: **[Passport](http://passportjs.org/docs)**.\n\n","idx":4},"local-strategy":{"content":"# Local Strategy\n\nThe most common / useful strategy to use is the local strategy.\n\nThis will require setting up FE routes for signup / login as well. \n\n## Exercise\n\nFollow the tutorial below to get passport working on your **[Github repo from Exercise 2](https://github.com/mottaquikarim/nycda_lecture36_express-pratice)**\n\n## Packages\n\n```bash\nnpm install --save passport passport-local express-session\n```\n\n## How to Install\n\nHere are the steps you would need to implement passport with the local strategy\n\n### 1\n\nBegin by including passport and your local strategy:\n\n```js\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\n```\n\n### 2\n\nThen, tell passport how to serialize and deserialize your user object\n\nEffectively, you can choose to store a user id or something to your session and have passport automatically give you the user object you need from it.\n\nFor our purposes, we will access the user object directly.\n\n```js\npassport.serializeUser((user, done) => {\n    console.log('HERE', Object.assign(user, {foo: 1}));\n    done(null, user)\n});\npassport.deserializeUser((user, done) => {\n    done(null, user)\n});\n```\n\n### 3\n\nLet's now define our strategy.\n\nThis is the logic we would use to determine and validate a user in our DB based on the log in credentials\n\n```js\npassport.use(new LocalStrategy({\n    usernameField: 'email',\n    passwordField: 'password',\n}, (email, password, done) => {\n    console.log('in localstrategy');\n    console.log(email, password);\n    if (!email || !password) {\n        return done('f-ed up', {}, {});\n    }\n\n    return done(null, {success: true});\n}));\n```\n\n### 4\n\nNow, let's initialize some stuff in passport.\n\n**Important**: you'll need to also use **express-session** middleware here\n\n```js\napp.use(passport.initialize());\napp.use(passport.session());\n```\n\n### 5\n\nFinally, let's define how login implementation should work in an actual route.\n\n```js\napp.post('/auth/login', (request, response, next) => {\n    passport.authenticate('local', (err, user, info) => {\n        if (err) console.log(err);\n        if (!user) console.log(user);\n\n        request.logIn(user, (err) => {\n            if (err) return next(err);\n            // if we are here, user has logged in!\n            response.header('Content-Type', 'application/json');\n            \n            response.send({\n                success: true,\n            });\n        });\n    })(request, response, next);\n\n});\n\n```\n\n### 6\n\nTest! Write a frontend that you can use to **POST** to the route you defined. Ensure that logging in works by console.logging all over the place. If it works out properly, you should see `{\"sucess\": true}` in your route response payload.\n","idx":5},"github-strategy":{"content":"# Github Strategy\n\nCheck out this **[tutorial](https://www.jokecamp.com/tutorial-passportjs-authentication-in-nodejs/)** for github strategy docs.","idx":6},"__list__":["home","title","desc","warmup","passportjs","local-strategy","github-strategy"]}